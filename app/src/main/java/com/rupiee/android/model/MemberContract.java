package com.rupiee.android.model;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint40;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.1.
 */
public final class MemberContract extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b6040516020806114768339810160405280805160008054600160a060020a03338116600160a060020a0319928316179092556001805492909316911617905550506114178061005f6000396000f300606060405236156100675763ffffffff60e060020a60003504166327c079aa811461006c57806373c2d967146101315780637d0c88f8146102745780638da5cb5b146102a4578063a230c524146102d3578063d59cbc35146102f2578063f2fde38b14610311575b600080fd5b341561007757600080fd5b61011d60048035600160a060020a0316906024803561ffff169160443560ff169160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061033295505050505050565b604051901515815260200160405180910390f35b341561013c57600080fd5b61011d60048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496863564ffffffffff169660208082013561ffff16975060408083013560ff1697509295506080820194506060909101358501808201935035918291601f83018190048102019051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061050195505050505050565b341561027f57600080fd5b61011d600160a060020a0360043581169061ffff602435169060443516606435610644565b34156102af57600080fd5b6102b76107b4565b604051600160a060020a03909116815260200160405180910390f35b34156102de57600080fd5b61011d600160a060020a03600435166107c3565b34156102fd57600080fd5b6102b7600160a060020a0360043516610807565b341561031c57600080fd5b610330600160a060020a0360043516610878565b005b600080548190819033600160a060020a0390811691161461035257600080fd5b600160a060020a038089166000908152600260208190526040909120908101548a9216151561038057600080fd5b600160a060020a03808b1660009081526002602052604080822060038101549097509092169450849163c9881791918c918c918c918c9190516020015260405160e060020a63ffffffff871602815261ffff85166004820190815260ff851660248301526080604483019081529091606481019060840185818151815260200191508051906020019080838360005b8381101561042757808201518382015260200161040f565b50505050905090810190601f1680156104545780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561048a578082015183820152602001610472565b50505050905090810190601f1680156104b75780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15156104d957600080fd5b6102c65a03f115156104ea57600080fd5b50505060405180519b9a5050505050505050505050565b60008054819033600160a060020a0390811691161461051f57600080fd5b89610528610913565b600160a060020a039091168152602001604051809103906000f080151561054e57600080fd5b9050608060405190810160409081528a825260208083018b9052600160a060020a03808e16838501819052908516606085015260009081526002909152208151819080516105a0929160200190610923565b506020820151816001019080516105bb929160200190610923565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556060820151600391909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055506106338a87878787610332565b5060019a9950505050505050505050565b600080548190819033600160a060020a0390811691161461066457600080fd5b600160a060020a03808816600090815260026020819052604090912090810154899216151561069257600080fd5b600160a060020a03808a166000908152600260205260409081902060038101549096509091169350839063897ab6ee908a908a905160e060020a63ffffffff851602815261ffff9092166004830152600160a060020a03166024820152604401600060405180830381600087803b151561070b57600080fd5b6102c65a03f1151561071c57600080fd5b5050600154600160a060020a031690506323b872dd888b8960006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561078c57600080fd5b6102c65a03f1151561079d57600080fd5b505050604051805190505050505050949350505050565b600054600160a060020a031681565b60008054819033600160a060020a039081169116146107e157600080fd5b5050600160a060020a039081166000908152600260208190526040909120015416151590565b60008054819033600160a060020a0390811691161461082557600080fd5b600160a060020a03808416600090815260026020819052604090912090810154859216151561085357600080fd5b50505050600160a060020a039081166000908152600260205260409020600301541690565b60005433600160a060020a0390811691161461089357600080fd5b600160a060020a03811615156108a857600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051610a2d806109bf83390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061096457805160ff1916838001178555610991565b82800160010185558215610991579182015b82811115610991578251825591602001919060010190610976565b5061099d9291506109a1565b5090565b6109bb91905b8082111561099d57600081556001016109a7565b9056006060604052341561000f57600080fd5b604051602080610a2d8339810160405280805160008054600160a060020a03338116600160a060020a031992831681178316179092556007805492909316911617905550506109ca806100636000396000f3006060604052361561008b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635628d03e81146100905780636faea806146100ba578063704eeb5d146100ba578063897ab6ee1461011f5780638da5cb5b14610147578063c988179114610176578063e0ab311a1461021b578063f2fde38b14610244575b600080fd5b341561009b57600080fd5b6100a3610263565b60405161ffff909116815260200160405180910390f35b34156100c557600080fd5b61010b60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061029295505050505050565b604051901515815260200160405180910390f35b341561012a57600080fd5b61014561ffff60043516600160a060020a0360243516610298565b005b341561015257600080fd5b61015a610374565b604051600160a060020a03909116815260200160405180910390f35b341561018157600080fd5b61010b6004803561ffff16906024803560ff16919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061038395505050505050565b341561022657600080fd5b61014561ffff6004351663ffffffff6024358116906044351661073f565b341561024f57600080fd5b610145600160a060020a03600435166107f6565b6000805433600160a060020a0390811691161461027f57600080fd5b5060015460a060020a900461ffff165b90565b50600190565b61ffff80831660009081526006602052604090208054909160a060020a9091041615156102c457600080fd5b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556007547f1a26249163ed5273c3e172b8e49c0824978c71cd661e5786a23dce5221494587928592911690760100000000000000000000000000000000000000000000900463ffffffff16604051600160a060020a03938416815291909216602082015263ffffffff9091166040808301919091526060909101905180910390a1505050565b600054600160a060020a031681565b600080600260ff8616111561039757600080fd5b6103a084610292565b506103aa83610292565b5060ff851615156103bd575060016103e1565b60ff8516600114156103d1575060026103e1565b60ff8516600214156103e1575060035b60e06040519081016040908152600080835261ffff8916602084015263ffffffff84169183019190915260608201819052608082015260a0810185905260c0810184905260018151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151815461ffff9190911660a060020a0275ffff0000000000000000000000000000000000000000199091161781556040820151815463ffffffff919091167601000000000000000000000000000000000000000000000279ffffffff00000000000000000000000000000000000000000000199091161781556060820151815463ffffffff9190911660d060020a027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff909116178155608082015160028201805460ff19166001838181111561052757fe5b021790555060a082015181600301908051610546929160200190610891565b5060c082015181600401908051610561929160200190610891565b50505061ffff8681166000908152600660205260409020600180548254600160a060020a0390911673ffffffffffffffffffffffffffffffffffffffff1990911617808355815475ffff00000000000000000000000000000000000000001990911660a060020a918290049094160292909217808255825479ffffffff00000000000000000000000000000000000000000000199091167601000000000000000000000000000000000000000000009182900463ffffffff9081169092021780835583547fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff90911660d060020a918290049092160217815560035460028201805460ff9092169160ff191684838181111561067857fe5b0217905550600382018160030190805460018160011615610100020316600290046106a492919061090f565b50600482018160040190805460018160011615610100020316600290046106cc92919061090f565b50506007547f3366c511f3434019713550cc49460c1e8972a13cf9bb4063d5ddc60fc1e400ae91508790600160a060020a03168760405161ffff9093168352600160a060020a03909116602083015260ff166040808301919091526060909101905180910390a150600195945050505050565b6000805433600160a060020a0390811691161461075b57600080fd5b5061ffff831660009081526006602052604090206001600282015460ff16600181111561078457fe5b141561078f57600080fd5b80547fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff811660d060020a9182900463ffffffff908116850181169092021782559283166000908152600190910160205260409020805463ffffffff19169190921617905550565b60005433600160a060020a0390811691161461081157600080fd5b600160a060020a038116151561082657600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108d257805160ff19168380011785556108ff565b828001600101855582156108ff579182015b828111156108ff5782518255916020019190600101906108e4565b5061090b929150610984565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061094857805485556108ff565b828001600101855582156108ff57600052602060002091601f016020900482015b828111156108ff578254825591600101919060010190610969565b61028f91905b8082111561090b576000815560010161098a5600a165627a7a72305820af87c3d9b88c7bace10b0edad91765aee92f08eed4a14ee616b9671813c348d50029a165627a7a7230582046f07d109ac5c6a510e6dbc62e1edb3f433876b5e75d55585c89ba0d653077090029";

    private MemberContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private MemberContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Future<TransactionReceipt> createLoan(Address memberAddr, Uint16 loanId, Uint8 loanProduct, Utf8String csAttestation, Utf8String bplAttestation) {
        Function function = new Function("createLoan", Arrays.<Type>asList(memberAddr, loanId, loanProduct, csAttestation, bplAttestation), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addMember(Address memberAddr, Utf8String name, Utf8String aadhaar, Uint40 mobile, Uint16 loanId, Uint8 loanProduct, Utf8String csAttestation, Utf8String bplAttestation) {
        Function function = new Function("addMember", Arrays.<Type>asList(memberAddr, name, aadhaar, mobile, loanId, loanProduct, csAttestation, bplAttestation), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> disburseLoan(Address memberAddr, Uint16 loanId, Address from, Uint256 amount) {
        Function function = new Function("disburseLoan", Arrays.<Type>asList(memberAddr, loanId, from, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> isMember(Address _addr) {
        Function function = new Function("isMember", 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> getCurrentLoan(Address memberAddr) {
        Function function = new Function("getCurrentLoan", 
                Arrays.<Type>asList(memberAddr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> transferOwnership(Address newOwner) {
        Function function = new Function("transferOwnership", Arrays.<Type>asList(newOwner), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<MemberContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address rupieeTokenAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(rupieeTokenAddr));
        return deployAsync(MemberContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<MemberContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address rupieeTokenAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(rupieeTokenAddr));
        return deployAsync(MemberContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static MemberContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MemberContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static MemberContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MemberContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OwnershipTransferredEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }
}
