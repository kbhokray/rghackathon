package com.rupiee.android.model;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint40;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.1.
 */
public final class RupieeToken extends Contract {
    private static final String BINARY = "606060409081526003805460a060020a60ff02191690558051908101604052600b81527f6d616e6167657240757069000000000000000000000000000000000000000000602082015260079080516200005d9291602001906200028c565b506102606040519081016040526102328082526200331d602083013960089080516200008e9291602001906200028c565b50606060405190810160405280602781526020017f3c2f44696765737456616c75653e3c2f5265666572656e63653e3c2f5369676e81526020017f6564496e666f3e000000000000000000000000000000000000000000000000008152506009908051620001019291602001906200028c565b5034156200010e57600080fd5b6040516200354f3803806200354f833981016040528080518201919060200180518201919060200180518201919060200180519190602001805160038054600160a060020a03338116600160a060020a0319909216821792839055929450889350879287928792879291909116146200018657600080fd5b604080519081016040528085815260200184815250600b866040518082805190602001908083835b60208310620001cf5780518252601f199092019160209182019101620001ae565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020815181908051620002199291602001906200028c565b50602082015181600101908051620002369291602001906200028c565b5090505084600a908051620002509291602001906200028c565b50600c8054600160a060020a03938416600160a060020a031991821617909155600d805492909316911617905550620003319650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002cf57805160ff1916838001178555620002ff565b82800160010185558215620002ff579182015b82811115620002ff578251825591602001919060010190620002e2565b506200030d92915062000311565b5090565b6200032e91905b808211156200030d576000815560010162000318565b90565b612fdc80620003416000396000f300606060405236156101385763ffffffff60e060020a60003504166305d2035b811461013d57806318160ddd146101645780631e9945451461018957806323b872dd146101dc57806324a844e3146102045780633a45f10d146102555780634c1b64cb146102df57806361bdde37146102fe5780636cccd81a146103515780636e3291bd146103a25780636f03f1671461043757806370a082311461050c5780637d64bcb41461052b5780638da5cb5b1461053e578063a23fad771461056d578063a9059cbb14610694578063afcb73cf146106b6578063ba217923146106c9578063bcdd6121146106dc578063d9b844e514610704578063e1f21c671461082b578063e7e31e7a14610853578063e939567914610872578063f019c26714610888578063f2fde38b146108b0578063fc6ee19f146108cf575b600080fd5b341561014857600080fd5b6101506109c4565b604051901515815260200160405180910390f35b341561016f57600080fd5b6101776109d4565b60405190815260200160405180910390f35b341561019457600080fd5b6101da60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109da95505050505050565b005b34156101e757600080fd5b610150600160a060020a0360043581169060243516604435610a0c565b341561020f57600080fd5b6101da60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b3695505050505050565b341561026057600080fd5b610268610b64565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102a457808201518382015260200161028c565b50505050905090810190601f1680156102d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ea57600080fd5b610150600160a060020a0360043516610c02565b341561030957600080fd5b61015060046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350610cf192505050565b341561035c57600080fd5b6101da60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d8f95505050505050565b34156103ad57600080fd5b61015060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505093359350610dbd92505050565b341561044257600080fd5b61015060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061121195505050505050565b341561051757600080fd5b610177600160a060020a036004351661173e565b341561053657600080fd5b61015061181e565b341561054957600080fd5b610551611893565b604051600160a060020a03909116815260200160405180910390f35b341561057857600080fd5b61015060048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965050933593506118a292505050565b341561069f57600080fd5b610150600160a060020a0360043516602435611acf565b34156106c157600080fd5b610268611ba5565b34156106d457600080fd5b610268611c10565b34156106e757600080fd5b610150600160a060020a0360043581169060243516604435611c7b565b341561070f57600080fd5b61015060048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505093359350611d5e92505050565b341561083657600080fd5b610150600160a060020a0360043581169060243516604435611f14565b341561085e57600080fd5b610150600160a060020a0360043516611feb565b341561087d57600080fd5b610268600435612099565b341561089357600080fd5b610150600160a060020a03600435811690602435166044356121ef565b34156108bb57600080fd5b6101da600160a060020a03600435166122c6565b34156108da57600080fd5b61015060048035600160a060020a0316906024803560ff16919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050923564ffffffffff169250612361915050565b60035460a060020a900460ff1681565b60005481565b60035433600160a060020a039081169116146109f557600080fd5b6007818051610a08929160200190612e5a565b5050565b600080600160a060020a0384161515610a2457600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610a6a908463ffffffff61253916565b600160a060020a038087166000908152600160205260408082209390935590861681522054610a9f908463ffffffff61254b16565b600160a060020a038516600090815260016020526040902055610ac8818463ffffffff61253916565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60035433600160a060020a03908116911614610b5157600080fd5b6009818051610a08929160200190612e5a565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b505050505081565b600354600090819033600160a060020a03908116911614610c2257600080fd5b50600160a060020a0382166000908152600460205260408120805474ffffffffffffffffffffffffffffffffffffffffff198116825560a060020a900460ff1691610c706001830182612ed8565b610c7e600283016000612ed8565b610c8c600383016000612ed8565b50600401805464ffffffffff19169055600160a060020a0383167f47404eec60c2dee077b2cc7e61f35b099ce1bc556fe3d09fb1a652a780e9e9428260405180826001811115610cd857fe5b60ff16815260200191505060405180910390a250919050565b60008160028483604051602001526040518082805190602001908083835b60208310610d2e5780518252601f199092019160209182019101610d0f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f11515610d7057600080fd5b50506040518051919091149050610d8657600080fd5b50600192915050565b60035433600160a060020a03908116911614610daa57600080fd5b6008818051610a08929160200190612e5a565b6000610dc7612f1f565b610dcf612f1f565b610dd7612f1f565b610ddf612f1f565b610de7612f1f565b610def612f1f565b610df7612f1f565b610e008b612561565b9650610ea1610e4160408051908101604052600681527f3c2f54786e3e00000000000000000000000000000000000000000000000000006020820152612561565b610e95610e8060408051908101604052600581527f3c54786e200000000000000000000000000000000000000000000000000000006020820152612561565b610e898b612589565b9063ffffffff6125b016565b9063ffffffff6125ed16565b9550610eac8661261f565b511515610eb857600080fd5b610f3d610f38610ee1604080519081016040526001815260f960020a6011026020820152612561565b610f2c610f38610ef08f612561565b610f2c60408051908101604052600481527f69643d22000000000000000000000000000000000000000000000000000000006020820152612561565b9063ffffffff61267016565b612561565b9450610f4f868663ffffffff6126d816565b1515610f5a57600080fd5b611068610f38610f83604080519081016040526001815260f960020a6011026020820152612561565b610f2c610f3861102c60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110225780601f10610ff757610100808354040283529160200191611022565b820191906000526020600020905b81548152906001019060200180831161100557829003601f168201915b5050505050612561565b610f2c60408051908101604052600681527f616464723d2200000000000000000000000000000000000000000000000000006020820152612561565b93506110fc6110a960408051908101604052600681527f3c2f5265663e00000000000000000000000000000000000000000000000000006020820152612561565b610e956110ef610f3888610f2c60408051908101604052600581527f3c526566200000000000000000000000000000000000000000000000000000006020820152612561565b8a9063ffffffff6125b016565b92506111078361261f565b51151561111357600080fd5b61114f60408051908101604052600c81527f747970653d2250415945452200000000000000000000000000000000000000006020820152612561565b9150611161838363ffffffff6126d816565b151561116c57600080fd5b6111e3610f38611195604080519081016040526001815260f960020a6011026020820152612561565b610f2c610f386111a7610f388f612099565b610f2c60408051908101604052600c81527f73657474416d6f756e743d2200000000000000000000000000000000000000006020820152612561565b90506111f5838263ffffffff6126d816565b151561120057600080fd5b5060019a9950505050505050505050565b600061121b612f36565b611223612f5b565b600b846040518082805190602001908083835b602083106112555780518252601f199092019160209182019101611236565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020604080519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561132c5780601f106113015761010080835404028352916020019161132c565b820191906000526020600020905b81548152906001019060200180831161130f57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ce5780601f106113a3576101008083540402835291602001916113ce565b820191906000526020600020905b8154815290600101906020018083116113b157829003601f168201915b5050505050815250509150816000015151158015906113f1575081602001515115155b15156113fc57600080fd5b6114ea61146d60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110225780601f10610ff757610100808354040283529160200191611022565b610f2c610f3861147c8a612561565b610f2c60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110225780601f10610ff757610100808354040283529160200191611022565b600c54909150600160a060020a031663a1a8858f6002836000604051602001526040518082805190602001908083835b602083106115395780518252601f19909201916020918201910161151a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f1151561157b57600080fd5b505060405180519050878560200151865160006040516020015260405160e060020a63ffffffff87160281526004810185815260806024830190815290916044810190606481019060840187818151815260200191508051906020019080838360005b838110156115f65780820151838201526020016115de565b50505050905090810190601f1680156116235780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611659578082015183820152602001611641565b50505050905090810190601f1680156116865780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156116bc5780820151838201526020016116a4565b50505050905090810190601f1680156116e95780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561170c57600080fd5b6102c65a03f1151561171d57600080fd5b50505060405180519050151561173257600080fd5b50600195945050505050565b600160a060020a038082166000908152600460205260408120549091839116151561176857600080fd5b600160a060020a0383166000908152600460205260408120543391859160a060020a900460ff169081600181111561179c57fe5b14156117bf57600160a060020a03838116908316146117ba57600080fd5b61180b565b60018160018111156117cd57fe5b141561180b5781600160a060020a031683600160a060020a031614806118005750600354600160a060020a038481169116145b151561180b57600080fd5b611814866126fe565b9695505050505050565b60035460009033600160a060020a0390811691161461183c57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b90565b600354600160a060020a031681565b600160a060020a03808716600090815260046020526040812054909188911615156118cc57600080fd5b600160a060020a03881660009081526004602052604081205489918991899189918991899160a060020a900460ff169081600181111561190857fe5b1415611aa157600d546119e9908790600160a060020a03166382225067886000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561197e578082015183820152602001611966565b50505050905090810190601f1680156119ab5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156119c957600080fd5b6102c65a03f115156119da57600080fd5b50505060405180519050610cf1565b50611a8f8585600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a855780601f10611a5a57610100808354040283529160200191611a85565b820191906000526020600020905b815481529060010190602001808311611a6857829003601f168201915b5050505050611211565b50611a9b868484610dbd565b50611ab2565b6001816001811115611aaf57fe5b50505b611abc8f8b612719565b5050505050505050509695505050505050565b6000600160a060020a0383161515611ae657600080fd5b600160a060020a033316600090815260016020526040902054611b0f908363ffffffff61253916565b600160a060020a033381166000908152600160205260408082209390935590851681522054611b44908363ffffffff61254b16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b600160a060020a0380841660009081526004602052604081205490918591161515611ca557600080fd5b600160a060020a0385166000908152600460205260408120543391879160a060020a900460ff1690816001811115611cd957fe5b1415611cfc57600160a060020a0383811690831614611cf757600080fd5b611d48565b6001816001811115611d0a57fe5b1415611d485781600160a060020a031683600160a060020a03161480611d3d5750600354600160a060020a038481169116145b1515611d4857600080fd5b611d5287876127fe565b98975050505050505050565b600160a060020a0380871660009081526004602052604081205490918891161515611d8857600080fd5b600160a060020a03881660009081526004602052604081205489918991899189918991899160a060020a900460ff1690816001811115611dc457fe5b1415611ebc57600d54611e39908790600160a060020a03166382225067886000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561197e578082015183820152602001611966565b50611eaa8585600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a855780601f10611a5a57610100808354040283529160200191611a85565b50611eb6868484610dbd565b50611ecd565b6001816001811115611eca57fe5b50505b7f164542dc94e3ccb817de7c8a09bfb248c73777e134ef84fe5454854163cf1ab48f604051600160a060020a03909116815260200160405180910390a1611abc8f8b6128a2565b600160a060020a0380841660009081526004602052604081205490918591161515611f3e57600080fd5b600160a060020a0385166000908152600460205260408120543391879160a060020a900460ff1690816001811115611f7257fe5b1415611f9557600160a060020a0383811690831614611f9057600080fd5b611fe1565b6001816001811115611fa357fe5b1415611fe15781600160a060020a031683600160a060020a03161480611fd65750600354600160a060020a038481169116145b1515611fe157600080fd5b611d5287876129cd565b60035460009033600160a060020a0390811691161461200957600080fd5b600160a060020a03821660009081526006602052604090205460ff16151561207057600580546001810161203d8382612f6d565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b50600160a060020a03166000908152600660205260409020805460ff1916600190811790915590565b6120a1612f5b565b6000806120ac612f5b565b6000915081808615156120e1577f3000000000000000000000000000000000000000000000000000000000000000945061213b565b600087111561213b5760019093019261010085049450600a87066030017f01000000000000000000000000000000000000000000000000000000000000000260010285179450600a8781151561213357fe5b0496506120e1565b836040518059106121495750595b90808252806020026020018201604052509250600091505b838210156121e457506008810260020a84027fff000000000000000000000000000000000000000000000000000000000000008116156121d957808383815181106121a857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b600190910190612161565b509095945050505050565b600160a060020a038084166000908152600460205260408120549091859116151561221957600080fd5b600160a060020a0385166000908152600460205260408120543391879160a060020a900460ff169081600181111561224d57fe5b141561227057600160a060020a038381169083161461226b57600080fd5b6122bc565b600181600181111561227e57fe5b14156122bc5781600160a060020a031683600160a060020a031614806122b15750600354600160a060020a038481169116145b15156122bc57600080fd5b611d528787612a39565b60035433600160a060020a039081169116146122e157600080fd5b600160a060020a03811615156122f657600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009033600160a060020a0390811691161461237f57600080fd5b600186600181111561238d57fe5b111561239857600080fd5b60c06040519081016040528088600160a060020a031681526020018760018111156123bf57fe5b81526020018681526020018581526020018481526020018364ffffffffff168152506004600089600160a060020a0316600160a060020a031681526020019081526020016000206000820151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039190911617815560208201518154829074ff0000000000000000000000000000000000000000191660a060020a83600181111561246557fe5b0217905550604082015181600101908051612484929160200190612e5a565b5060608201518160020190805161249f929160200190612e5a565b506080820151816003019080516124ba929160200190612e5a565b5060a0820151600491909101805464ffffffffff191664ffffffffff90921691909117905550600160a060020a0387167ff1ef17eba8efb1c78a2612d5d8f4e9cf950dfb623dd8b6408a0b8db03422f32c876040518082600181111561251c57fe5b60ff16815260200191505060405180910390a29695505050505050565b60008282111561254557fe5b50900390565b60008282018381101561255a57fe5b9392505050565b612569612f1f565b602082016040805190810160405280845181526020019190915292915050565b612591612f1f565b6040805190810160405280835181526020018360200151905292915050565b6125b8612f1f565b60006125d08451856020015185518660200151612b33565b905083602001518103848181510390525060208401525090919050565b6125f5612f1f565b600061260d8451856020015185518660200151612bd6565b90508360200151900383525090919050565b612627612f5b565b61262f612f5b565b600083516040518059106126405750595b908082528060200260200182016040525091506020820190506126698185602001518651612c76565b5092915050565b612678612f5b565b612680612f5b565b600083518551016040518059106126945750595b908082528060200260200182016040525091506020820190506126bd8186602001518751612c76565b6126d08551820185602001518651612c76565b509392505050565b600082602001516126f58451856020015185518660200151612bd6565b14159392505050565b600160a060020a031660009081526001602052604090205490565b600160a060020a038083166000908152600460205260408120549091849116151561274357600080fd5b600160a060020a0384166000908152600460205260408120543391869160a060020a900460ff169081600181111561277757fe5b141561279a57600160a060020a038381169083161461279557600080fd5b6127e6565b60018160018111156127a857fe5b14156127e65781600160a060020a031683600160a060020a031614806127db5750600354600160a060020a038481169116145b15156127e657600080fd5b6127f08787612cbb565b506001979650505050505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054612836908363ffffffff61254b16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a038083166000908152600460205260408120549091829185911615156128ce57600080fd5b600160a060020a0385166000908152600460205260408120543391879160a060020a900460ff169081600181111561290257fe5b141561292557600160a060020a038381169083161461292057600080fd5b612971565b600181600181111561293357fe5b14156129715781600160a060020a031683600160a060020a031614806129665750600354600160a060020a038481169116145b151561297157600080fd5b61297b8888612d68565b50600094505b60055461ffff861610156127f0576129c18860058761ffff168154811015156129a657fe5b600091825260209091200154600160a060020a031689611c7b565b50600190940193612981565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115612a9657600160a060020a033381166000908152600260209081526040808320938816835292905290812055612acd565b612aa6818463ffffffff61253916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600080808080888711612bc45760208711612b8a5760018760200360080260020a031980875116888b038a018a96505b818388511614612b7f576001870196819010612b63578b8b0196505b505050839450612bca565b8686209150879350600092505b8689038311612bc4575085832081811415612bb457839450612bca565b6001938401939290920191612b97565b88880194505b50505050949350505050565b6000808080878611612c675760208611612c325760018660200360080260020a031980865116878a03890194505b808286511614612c2357600019850194899011612c0457889450612c28565b938701935b5050829350612c6b565b8585209150858803870192505b868310612c67575084822081811415612c5c578583019350612c6b565b600183039250612c3f565b8693505b505050949350505050565b60005b60208210612c9c5782518452602084019350602083019250602082039150612c79565b6001826020036101000a03905080198351168185511617909352505050565b6000808211612cc957600080fd5b600160a060020a038316600090815260016020526040902054612cf2908363ffffffff61253916565b600160a060020a03841660009081526001602052604081209190915554612d1f908363ffffffff61253916565b600055600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250600192915050565b60035460009060a060020a900460ff1615612d8257600080fd5b600054612d95908363ffffffff61254b16565b6000908155600160a060020a038416815260016020526040902054612dc0908363ffffffff61254b16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e9b57805160ff1916838001178555612ec8565b82800160010185558215612ec8579182015b82811115612ec8578251825591602001919060010190612ead565b50612ed4929150612f96565b5090565b50805460018160011615610100020316600290046000825580601f10612efe5750612f1c565b601f016020900490600052602060002090810190612f1c9190612f96565b50565b604080519081016040526000808252602082015290565b6040805190810160405280612f49612f5b565b8152602001612f56612f5b565b905290565b60206040519081016040526000815290565b815481835581811511612f9157600083815260209020612f91918101908301612f96565b505050565b61189091905b80821115612ed45760008155600101612f9c5600a165627a7a723058207fbab584e45b4edc5f572cae075f6221e2e5838767ec5cb3aa32707eef64544200293c5369676e6564496e666f20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f30392f786d6c6473696723223e3c43616e6f6e6963616c697a6174696f6e4d6574686f6420416c676f726974686d3d22687474703a2f2f7777772e77332e6f72672f323030312f31302f786d6c2d6578632d6331346e23223e3c2f43616e6f6e6963616c697a6174696f6e4d6574686f643e3c5369676e61747572654d6574686f6420416c676f726974686d3d22687474703a2f2f7777772e77332e6f72672f323030312f30342f786d6c647369672d6d6f7265237273612d736861323536223e3c2f5369676e61747572654d6574686f643e3c5265666572656e6365205552493d22223e3c5472616e73666f726d733e3c5472616e73666f726d20416c676f726974686d3d22687474703a2f2f7777772e77332e6f72672f323030302f30392f786d6c6473696723656e76656c6f7065642d7369676e6174757265223e3c2f5472616e73666f726d3e3c5472616e73666f726d20416c676f726974686d3d22687474703a2f2f7777772e77332e6f72672f54522f323030312f5245432d786d6c2d6331346e2d3230303130333135223e3c2f5472616e73666f726d3e3c2f5472616e73666f726d733e3c4469676573744d6574686f6420416c676f726974686d3d22687474703a2f2f7777772e77332e6f72672f323030312f30342f786d6c656e6323736861323536223e3c2f4469676573744d6574686f643e3c44696765737456616c75653e";

    private RupieeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private RupieeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<RequestVerifiedEventResponse> getRequestVerifiedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RequestVerified", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RequestVerifiedEventResponse> responses = new ArrayList<RequestVerifiedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RequestVerifiedEventResponse typedResponse = new RequestVerifiedEventResponse();
            typedResponse.beneficiary = (Address) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RequestVerifiedEventResponse> requestVerifiedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RequestVerified", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RequestVerifiedEventResponse>() {
            @Override
            public RequestVerifiedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RequestVerifiedEventResponse typedResponse = new RequestVerifiedEventResponse();
                typedResponse.beneficiary = (Address) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AccountAddedEventResponse> getAccountAddedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccountAdded", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccountAddedEventResponse> responses = new ArrayList<AccountAddedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccountAddedEventResponse typedResponse = new AccountAddedEventResponse();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._type = (Uint8) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccountAddedEventResponse> accountAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccountAdded", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccountAddedEventResponse>() {
            @Override
            public AccountAddedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccountAddedEventResponse typedResponse = new AccountAddedEventResponse();
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._type = (Uint8) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<AccountDeletedEventResponse> getAccountDeletedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccountDeleted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccountDeletedEventResponse> responses = new ArrayList<AccountDeletedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccountDeletedEventResponse typedResponse = new AccountDeletedEventResponse();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._type = (Uint8) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccountDeletedEventResponse> accountDeletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccountDeleted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccountDeletedEventResponse>() {
            @Override
            public AccountDeletedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccountDeletedEventResponse typedResponse = new AccountDeletedEventResponse();
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._type = (Uint8) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Burn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.burner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BurnEventResponse> burnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Burn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.burner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.to = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.to = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<MintFinishedEventResponse> getMintFinishedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<MintFinishedEventResponse> responses = new ArrayList<MintFinishedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintFinishedEventResponse> mintFinishedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintFinishedEventResponse>() {
            @Override
            public MintFinishedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.spender = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.spender = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<Bool> mintingFinished() {
        Function function = new Function("mintingFinished", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setOwnerVpa(Utf8String vpa) {
        Function function = new Function("setOwnerVpa", Arrays.<Type>asList(vpa), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> transferFrom(Address _from, Address _to, Uint256 _value) {
        Function function = new Function("transferFrom", Arrays.<Type>asList(_from, _to, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> setPostDigestStr(Utf8String postDigest) {
        Function function = new Function("setPostDigestStr", Arrays.<Type>asList(postDigest), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> ownerVpa() {
        Function function = new Function("ownerVpa", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> deleteAccount(Address addr) {
        Function function = new Function("deleteAccount", Arrays.<Type>asList(addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bool> verifyDigest(Utf8String _msg, Bytes32 digest) {
        Function function = new Function("verifyDigest", 
                Arrays.<Type>asList(_msg, digest), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setPreDigestStr(Utf8String preDigest) {
        Function function = new Function("setPreDigestStr", Arrays.<Type>asList(preDigest), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bool> validateAndParseUpi(Utf8String upiResp, Utf8String txnId, Uint256 amount) {
        Function function = new Function("validateAndParseUpi", 
                Arrays.<Type>asList(upiResp, txnId, amount), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> verifySignature(Utf8String digest64, DynamicBytes sign, Utf8String keyName) {
        Function function = new Function("verifySignature", 
                Arrays.<Type>asList(digest64, sign, keyName), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> balanceOf(Address _of) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(_of), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> finishMinting() {
        Function function = new Function("finishMinting", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> burn(Address _from, Utf8String upiResp, Utf8String digest64, DynamicBytes sign, Utf8String txId, Uint256 amount) {
        Function function = new Function("burn", Arrays.<Type>asList(_from, upiResp, digest64, sign, txId, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> transfer(Address _to, Uint256 _value) {
        Function function = new Function("transfer", Arrays.<Type>asList(_to, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> postDigestStr() {
        Function function = new Function("postDigestStr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> preDigestStr() {
        Function function = new Function("preDigestStr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> increaseApproval(Address _account, Address _spender, Uint256 _addedValue) {
        Function function = new Function("increaseApproval", Arrays.<Type>asList(_account, _spender, _addedValue), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> mint(Address _to, Utf8String upiResp, Utf8String digest64, DynamicBytes sign, Utf8String txId, Uint256 amount) {
        Function function = new Function("mint", Arrays.<Type>asList(_to, upiResp, digest64, sign, txId, amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> approve(Address _account, Address _spender, Uint256 _value) {
        Function function = new Function("approve", Arrays.<Type>asList(_account, _spender, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addSpender(Address spender) {
        Function function = new Function("addSpender", Arrays.<Type>asList(spender), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> uintToString(Uint256 v) {
        Function function = new Function("uintToString", 
                Arrays.<Type>asList(v), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> decreaseApproval(Address _account, Address _spender, Uint256 _subtractedValue) {
        Function function = new Function("decreaseApproval", Arrays.<Type>asList(_account, _spender, _subtractedValue), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> transferOwnership(Address newOwner) {
        Function function = new Function("transferOwnership", Arrays.<Type>asList(newOwner), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> registerAccount(Address addr, Uint8 _type, Utf8String aadhaar, Utf8String name, Utf8String vpa, Uint40 mobile) {
        Function function = new Function("registerAccount", Arrays.<Type>asList(addr, _type, aadhaar, name, vpa, mobile), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<RupieeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String keyName, DynamicBytes m, DynamicBytes e, Address rsaVerifier, Address base64Utils) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(keyName, m, e, rsaVerifier, base64Utils));
        return deployAsync(RupieeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<RupieeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Utf8String keyName, DynamicBytes m, DynamicBytes e, Address rsaVerifier, Address base64Utils) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(keyName, m, e, rsaVerifier, base64Utils));
        return deployAsync(RupieeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RupieeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RupieeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static RupieeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RupieeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class RequestVerifiedEventResponse {
        public Address beneficiary;
    }

    public static class AccountAddedEventResponse {
        public Address addr;

        public Uint8 _type;
    }

    public static class AccountDeletedEventResponse {
        public Address addr;

        public Uint8 _type;
    }

    public static class BurnEventResponse {
        public Address burner;

        public Uint256 value;
    }

    public static class MintEventResponse {
        public Address to;

        public Uint256 amount;
    }

    public static class MintFinishedEventResponse {
    }

    public static class OwnershipTransferredEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class ApprovalEventResponse {
        public Address owner;

        public Address spender;

        public Uint256 value;
    }

    public static class TransferEventResponse {
        public Address from;

        public Address to;

        public Uint256 value;
    }
}
